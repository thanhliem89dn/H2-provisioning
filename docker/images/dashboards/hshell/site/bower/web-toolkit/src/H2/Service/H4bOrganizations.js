'use strict';

define([], function() {
        var service = 'com.hailocab.service.h4b-organization';

        var OrganizationsService = function(h2api) {
            this.h2api       = h2api;
        };

        OrganizationsService.prototype = {

            /**
             * List organizations
             *
             * https://github.com/hailocab/h4b-organization-service/blob/master/proto/list_organizations/list_organizations.proto
             *
             * @param  {Object} params    {count, start, memberId}
             * @return {Promise}
             */
            list: function(params) {
                return this.h2api.call(service, 'list_organizations', params);
            },

            /**
             * List organizations by admin
             *
             * https://github.com/hailocab/h4b-organization-service/blob/master/proto/list_organizations_by_admin/list_organization_by_admin.proto
             *
             * @param  {Object} params
             *
             * {
             *   adminId: 'ADMINID',
             *   id: 'ORGANIZATIONID'
             * }
             *
             * @return {Promise}
             */
            listByAdmin: function(params) {
                return this.h2api.call(service, 'list_organizations_by_admin', params);
            },

            /**
             * Read organization by ID
             *
             * https://github.com/hailocab/h4b-organization-service/blob/master/proto/read_organization/read_organization.proto
             *
             * @param  {String} id Id of the organization
             * @return {Promise}
             */
            read: function(id) {
                return this.h2api.call(service, 'read_organization', {
                    id: id
                });
            },

            /**
             * Create organization
             *
             * https://github.com/hailocab/h4b-organization-service/blob/master/proto/create_organization/create_organization.proto
             * https://github.com/hailocab/h4b-organization-service/blob/master/proto/organization.proto
             *
             * It also sends 'id' parameter that is taken from organization
             * object and has to be generated by you preferably as GUID
             *
             * @param  {Object} organization Organization
             * @return {Promise}
             */
            createOrganization: function(organization, adminId) {
                return this.h2api.call(service, 'create_organization', {
                    organization: organization,
                    adminId: adminId
                });
            },

            /**
             * Update organization
             *
             * https://github.com/hailocab/h4b-organization-service/blob/master/proto/update_organization/update_organization.proto
             * https://github.com/hailocab/h4b-organization-service/blob/master/proto/organization.proto
             *
             * @param  {Object} organization Organization
             * @return {Promise}
             */
            updateOrganization: function(organization) {
                return this.h2api.call(service, 'update_organization', {
                    organization: organization
                });
            },

            /**
             * List members by organization ID
             *
             * https://github.com/hailocab/h4b-organization-service/blob/master/proto/list_members/list_members.proto
             *
             * @param  {String} organizationId Organization ID
             * @param  {String} start          The organization ID to start from
             * @param  {int} count             Number of organizations to retrive
             * @return {Promise}
             */
            listMembers: function(organizationId, start, count) {
                return this.h2api.call(service, 'list_members', {
                    start: start,
                    organizationId: organizationId,
                    count: count
                });
            },

            /**
             * Create member for organization
             *
             * https://github.com/hailocab/h4b-organization-service/blob/master/proto/create_member/create_member.proto
             *
             * @param  {Object} member Member
             * @return {Promise}
             */
            createMember: function(member) {
                return this.h2api.call(service, 'create_member', member);
            },

            /**
             * Update member
             *
             * https://github.com/hailocab/h4b-organization-service/blob/master/proto/update_member/update_member.proto
             *
             * List of possible statuses: lead, pending, accepted, rejected, suspended
             *
             * @param  {Object} member Member
             * @return {Promise}
             */
            updateMember: function(member) {
                return this.h2api.call(service, 'update_member', member);
            }
        };
        return OrganizationsService;
    });
